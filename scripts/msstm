#!/usr/bin/env python3

import logging
import os
import threading

import click

import mss_transmeta.core.client as msstm_client
import mss_transmeta.core.project as msstm_project
import mss_transmeta.core.util as msstm_util


@click.command()
@click.argument('config_file')
def cli(config_file):
    ''' The command line interface entry point.

    '''
    # Create the logger instance.
    logger_name = 'mss_transmeta'
    logger = logging.getLogger(logger_name)
    # Set the common log level to debug. The log level is refined
    # for each handler.
    logger.setLevel('DEBUG')

    # Create a logger logging to stdout. Used for output of warnings
    # and errors.
    stream_handler = msstm_util.get_logger_stream_handler(log_level = 'INFO')
    logger.addHandler(stream_handler)

    logger.info("Starting msstm.")

    # Load the config file.
    if not os.path.exists(config_file):
        logger.error('Configuration file not found: %s.', config_file)
        raise click.Abort()
    config = msstm_util.load_configuration(config_file)

    # Create the log file handler.
    log_dir = config['log']['log_dir']
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    log_filepath = os.path.join(log_dir, 'msstm.log')
    handler = msstm_util.get_logger_rotating_file_handler(filename = log_filepath,
                                                          log_level = config['log']['loglevel'],
                                                          max_bytes = config['log']['max_bytes'],
                                                          backup_count = config['log']['backup_count'])
    logger.addHandler(handler)

    # Remove the stream log handler.
    logger.info('Successfully configured the logging to file. Removing the stream handler.')
    logger.info('All log entries are now written to %s.', log_filepath)
    logger.removeHandler(stream_handler)

    project = msstm_project.Project(**config)

    project.connect_to_db()
    project.load_inventory()

    # Some threading control instances.
    stop_event = threading.Event()
   
    # Create the Seedlink client.
    host = config['seedlink']['host']
    port = config['seedlink']['port']
    server_url = host + ':' + str(port)
    client = msstm_client.TransMetaClient(project = project,
                                          server_url = server_url)
    client.seedlink_connect()
    client_thread = threading.Thread(target = client.run)
    client_thread.start()

    logger.info("Started the client thread.")

    kwargs = {'callback': client.save_data,
              'interval': 10,
              'logger': logger,
              'stop_event': stop_event}
    timer_thread = threading.Thread(target = msstm_util.task_timer,
                                    kwargs = kwargs)
    timer_thread.start()
    logger.info("Started the timer_thread.")


if __name__ == '__main__':
    cli()
